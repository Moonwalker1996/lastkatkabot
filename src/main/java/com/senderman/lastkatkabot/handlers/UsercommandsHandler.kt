package com.senderman.lastkatkabot.handlers

import com.annimon.tgbotsmodule.api.methods.Methods
import com.senderman.TgUser
import com.senderman.lastkatkabot.LastkatkaBot
import com.senderman.lastkatkabot.LastkatkaBotHandler
import com.senderman.lastkatkabot.Services
import com.senderman.lastkatkabot.tempobjects.BnCPlayer
import org.jsoup.Jsoup
import org.jsoup.nodes.Document
import org.telegram.telegrambots.meta.api.objects.ChatMember
import org.telegram.telegrambots.meta.api.objects.Message
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import org.telegram.telegrambots.meta.logging.BotLogger
import java.io.IOException
import java.net.URL
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

class UsercommandsHandler(private val handler: LastkatkaBotHandler) {

    fun marryme(message: Message) {
        val marryById = message.text.trim().matches(Regex("/marryme\\s+\\d+"))
        val chatId = message.chatId
        val userId = message.from.id
        val text: String
        val loverId: Int
        if (Services.db.getLover(userId) != 0) {
            handler.sendMessage(chatId, "–í—Å–º—ã—Å–ª–µ? –í—ã —á—Ç–æ, —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–µ?!")
            return
        }

        if (!marryById) {
            if (!message.isReply
                    || message.from.id == message.replyToMessage.from.id || message.replyToMessage.from.bot) return
            loverId = message.replyToMessage.from.id
            val user = TgUser(Methods.getChatMember(chatId, userId).call(handler).user)
            text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + user.link + " –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Ä—É–∫—É, —Å–µ—Ä–¥—Ü–µ –∏ —à–∞–≤—É—Ö—É. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?"

        } else {
            if (message.isUserMessage) return
            loverId = try {
                message.text.split(" ")[1].toInt()
            } catch (e: NumberFormatException) {
                handler.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
                return
            }
            val user = TgUser(Methods.getChatMember(chatId, userId).call(handler).user)
            val lover = TgUser(Methods.getChatMember(chatId, loverId).call(handler).user)
            text = "${lover.link}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.link} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Ä—É–∫—É, —Å–µ—Ä–¥—Ü–µ –∏ —à–∞–≤—É—Ö—É. –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?"
        }
        if (Services.db.getLover(loverId) != 0) {
            handler.sendMessage(chatId, "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å–≤–æ—è –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞!")
            return
        }
        val markup = InlineKeyboardMarkup()
        markup.keyboard = listOf(listOf(
                InlineKeyboardButton().apply {
                    this.text = "–ü—Ä–∏–Ω—è—Ç—å"
                    callbackData = LastkatkaBot.CALLBACK_ACCEPT_MARRIAGE + "$userId $loverId"

                },
                InlineKeyboardButton().apply {
                    this.text = "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"
                    callbackData = LastkatkaBot.CALLBACK_DENY_MARRIAGE + "$userId $loverId"
                }
        ))
        val sm = Methods.sendMessage()
                .setChatId(chatId)
                .setText(text)
                .setReplyMarkup(markup)
        if (!marryById) {
            sm.replyToMessageId = message.replyToMessage.messageId
        }
        handler.sendMessage(sm)
    }

    fun divorce(message: Message) {
        val chatId = message.chatId
        val userId = message.from.id
        val loverId = Services.db.getLover(userId)
        if (loverId == 0) {
            handler.sendMessage(chatId, "–£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç!")
            return
        }
        Services.db.divorce(userId)
        handler.sendMessage(chatId, "–í—ã —Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å —Å–æ —Å–≤–æ–µ–π –ø–æ–ª–æ–≤–∏–Ω–∫–æ–π! –ê –≤–µ–¥—å —Ç–∞–∫ –≤—Å–µ —Ö–æ—Ä–æ—à–æ –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å...")
        val user = TgUser(Methods.getChatMember(userId.toLong(), userId).call(handler).user)
        handler.sendMessage(loverId, "–í–∞—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∫–∞ (${user.link}) –ø–æ–∫–∏–Ω—É–ª–∞ –≤–∞—Å... –¢–µ–ø–µ—Ä—å –≤—ã –æ–¥–Ω–∏...")
    }

    fun stats(message: Message) {
        val player = if (!message.isReply) message.from else message.replyToMessage.from
        if (player.bot) {
            handler.sendMessage(message.chatId, "–ù–æ —ç—Ç–æ –∂–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞! " +
                    "–†–∞–∑–≤–µ –º–æ–∂–µ—Ç –±–æ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∏–º—Ñ–æ–Ω–∏—é, –∏–º–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏–≥—Ä–∞—Ç—å –≤ BnC, –ª—é–±–∏—Ç—å?")
            return
        }
        val user = TgUser(player)
        val stats = Services.db.getStats(player.id)
        val (_, duelWins, totalDuels, bnc, loverId) = stats
        val winRate = if (totalDuels == 0) 0 else 100 * duelWins / totalDuels
        var text = """
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${user.name}:

            –î—É—ç–ª–µ–π –≤—ã–∏–≥—Ä–∞–Ω–æ: $duelWins
            –í—Å–µ–≥–æ –¥—É—ç–ª–µ–π: $totalDuels
            –í–∏–Ω—Ä–µ–π—Ç: $winRate%
            
            üêÆ –ë–∞–ª–ª–æ–≤ –∑–∞ –±—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã: $bnc
        """.trimIndent()
        if (loverId != 0) {
            val lover = TgUser(Methods.getChatMember(loverId.toLong(), loverId).call(handler).user)
            text += "\n‚ù§Ô∏è –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞: "
            text += if (message.isUserMessage) lover.link else lover.name
        }
        handler.sendMessage(message.chatId, text)
    }

    fun pinList(message: Message) {
        if (!isFromWwBot(message)) return
        Methods.Administration.pinChatMessage(message.chatId, message.replyToMessage.messageId)
                .setNotificationEnabled(false).call(handler)
        Methods.deleteMessage(message.chatId, message.messageId).call(handler)
    }

    fun weather(message: Message) {
        val chatId = message.chatId
        var city: String? = message.text.trim().replace("/weather[_\\d\\w@]*\\s*".toRegex(), "")
        if (city!!.isBlank()) { // city is not specified
            city = Services.db.getUserCity(message.from.id)
            if (city == null) {
                handler.sendMessage(chatId, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥!")
                return
            }
        } else { // find a city
            try {
                val searchPage = Jsoup.parse(URL("https://yandex.ru/pogoda/search?request=" + URLEncoder.encode(city, StandardCharsets.UTF_8)), 10000)
                val table = searchPage.selectFirst("div.grid")
                val searchResult = table.selectFirst("li.place-list__item")
                city = searchResult.selectFirst("a").attr("href")
            } catch (e: NullPointerException) {
                handler.sendMessage(chatId, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            } catch (e: IOException) {
                handler.sendMessage(chatId, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
            }
        }
        Services.db.setUserCity(message.from.id, city!!)
        val weatherPage: Document
        weatherPage = try {
            Jsoup.parse(URL("https://yandex.ru$city"), 10000)
        } catch (e: IOException) {
            handler.sendMessage(chatId, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
            return
        }
        // parse weather
        val table = weatherPage.selectFirst("div.card_size_big")
        val title = weatherPage.selectFirst("h1.header-title__title").text()
        val temperature = table.selectFirst("div.fact__temp span.temp__value").text()
        val feelsLike = table.selectFirst("div.fact__feels-like div.term__value").text()
        val feelings = table.selectFirst("div.fact__feelings div.link__condition").text()
        val wind = table.selectFirst("div.fact__wind-speed div.term__value").text()
        val humidity = table.selectFirst("div.fact__humidity div.term__value").text()
        val pressure = table.selectFirst("div.fact__pressure div.term__value").text()
        val forecast = """
            <b>$title</b>
            
            $feelings
            üå°: $temperature ¬∞C
            ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ $feelsLike
            üí®: $wind
            üíß: $humidity
            üß≠: $pressure
            """.trimIndent()

        handler.sendMessage(chatId, forecast)
    }

    fun feedback(message: Message) {
        val report = message
                .text.trim()
                .replace("/feedback(:?@${handler.botUsername})?\\s*".toRegex(), "")
        if (report.isBlank() && !message.isReply) return

        val user = TgUser(message.from)
        val markup = InlineKeyboardMarkup()
        markup.keyboard = listOf(listOf(
                InlineKeyboardButton().apply {
                    text = "–û—Ç–≤–µ—Ç–∏—Ç—å"
                    callbackData = "${LastkatkaBot.CALLBACK_ANSWER_FEEDBACK}${message.chatId} ${message.messageId}"
                },
                InlineKeyboardButton().apply {
                    text = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
                    callbackData = "${LastkatkaBot.CALLBACK_BLOCK_USER} ${message.from.id}"
                }
        ))

        val bugreport = ("‚ö†Ô∏è <b>–§–∏–¥–±–µ–∫</b>\n\n" +
                "–û—Ç: ${user.link}\n\n$report")
        handler.sendMessage(Methods.sendMessage()
                .setChatId(Services.botConfig.mainAdmin.toLong())
                .setText(bugreport)
                .setReplyMarkup(markup))
        if (message.isReply) {
            Methods.forwardMessage(
                    Services.botConfig.mainAdmin.toLong(),
                    message.replyToMessage.chatId,
                    message.replyToMessage.messageId
            ).call(handler)
        }

        handler.sendMessage(Methods.sendMessage()
                .setChatId(message.chatId)
                .setText("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±—É –±–æ—Ç–∞!")
                .setReplyToMessageId(message.messageId))
    }

    fun bncTop(message: Message) {
        val chatId = message.chatId
        val top = Services.db.getTop()
        val text = StringBuilder("<b>–¢–æ–ø-10 –∑–∞–¥—Ä–æ—Ç–æ–≤ –≤ bnc:</b>\n\n")
        var counter = 1
        for ((playerId, score) in top) {
            val member = Methods.getChatMember(playerId.toLong(), playerId).call(handler)
            val player = BnCPlayer(playerId, member.user.firstName, score)
            text.append(counter).append(": ")
            if (message.isUserMessage) text.append(player.link) else text.append(player.name)
            text.append(" (${player.score})\n")
            counter++
        }
        handler.sendMessage(chatId, text.toString())
    }

    fun pair(message: Message) {
        if (message.isUserMessage) return

        val chatId = message.chatId
        // check for existing pair
        if (Services.db.pairExistsToday(chatId)) {
            var pair = Services.db.getPairOfTheDay(chatId)
            pair = "–ü–∞—Ä–∞ –¥–Ω—è: $pair"
            handler.sendMessage(chatId, pair)
            return
        }
        // remove users without activity for 2 weeks and get list of actual users
        Services.db.removeOldUsers(chatId, message.date - 1209600)
        val userIds = Services.db.getChatMemebersIds(chatId)
        // generate 2 different random users
        val user1: TgUser
        val user2: TgUser
        val isTrueLove: Boolean
        try {
            user1 = getUserForPair(chatId, userIds)
            userIds.remove(user1.id)
            val lover = getSecondUserForPair(chatId, userIds, user1)
            user2 = lover.user
            isTrueLove = lover.isTrueLover
        } catch (e: Exception) {
            handler.sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã! –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –µ—â–µ –Ω–∞–ø–∏—à–µ—Ç –≤ —á–∞—Ç!")
            return
        }
        // get a random text and set up a pair
        val loveArray = Services.botConfig.loveStrings
        val loveStrings = loveArray.random().trim().split("\n")
        try {
            for (i in 0 until loveStrings.lastIndex) {
                handler.sendMessage(chatId, loveStrings[i])
                Thread.sleep(1500)
            }
        } catch (e: InterruptedException) {
            BotLogger.error("PAIR", "–û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞")
        }
        val pair = if (isTrueLove) "${user1.name} \uD83D\uDC96 ${user2.name}" else "${user1.name} ‚ù§ ${user2.name}"
        Services.db.setPair(chatId, pair)
        handler.sendMessage(chatId, java.lang.String.format(loveStrings.last(), user1.link, user2.link))
    }

    data class Lover(val user: TgUser, val isTrueLover: Boolean)

    @Throws(Exception::class)
    private fun getSecondUserForPair(chatId: Long, userIds: MutableList<Int>, first: TgUser): Lover {
        val loverId = Services.db.getLover(first.id)
        return if (loverId in userIds) {
            Lover(TgUser(Methods.getChatMember(chatId, loverId).call(handler).user), true)
        } else Lover(getUserForPair(chatId, userIds), false)
    }

    @Throws(Exception::class)
    private fun getUserForPair(chatId: Long, userIds: MutableList<Int>): TgUser {
        var member: ChatMember?
        while (userIds.size > 2) {
            val userId = userIds.random()
            member = Methods.getChatMember(chatId, userId).call(handler)
            if (member != null)
                return TgUser(member.user)
            Services.db.removeUserFromChatDB(userId, chatId)
            userIds.remove(userId)
        }
        throw Exception("Not enough users")
    }

    fun lastpairs(message: Message) {
        if (message.isUserMessage) return
        val chatId = message.chatId
        val history = Services.db.getPairsHistory(chatId)
        handler.sendMessage(chatId,
                history?.let {
                    "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∞—Ä:</b>\n\n$it"
                } ?: "–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É /pair!"
        )
    }

    private fun isFromWwBot(message: Message): Boolean {
        return message.replyToMessage.from.userName in Services.botConfig.wwBots &&
                message.replyToMessage.text.startsWith("#players")
    }

}